// Much of the code in the below methods was taken from https://github.com/Auburn/FastNoiseLite

global.gradients = [
	0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,
    0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,
    0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,
    -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,
    -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,
    -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,
    0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,
    0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,
    0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,
    -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,
    -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,
    -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,
    0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,
    0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,
    0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,
    -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,
    -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,
    -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,
    0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,
    0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,
    0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,
    -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,
    -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,
    -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,
    0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,
    0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,
    0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,
    -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,
    -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,
    -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,
    0.38268343236509, 0.923879532511287, 0.923879532511287, 0.38268343236509, 0.923879532511287, -0.38268343236509, 0.38268343236509, -0.923879532511287,
    -0.38268343236509, -0.923879532511287, -0.923879532511287, -0.38268343236509, -0.923879532511287, 0.38268343236509, -0.38268343236509, 0.923879532511287
];

/**
* Generate Perlin Noise for the given coordinates.
*
* @param {real} _x x-coordinate to use.
* @param {real} _y y-coordinate to use.
* @return {real} Noise value.
*/
function perlin_noise(_x, _y) {
	var _x0 = floor(_x);
	var _y0 = floor(_y);
	
	var _xd0 = _x - _x0;
	var _yd0 = _y - _y0;
	var _xd1 = _xd0 - 1;
	var _yd1 = _yd0 - 1;
	
	var _xs = fade(_xd0);
	var _ys = fade(_yd0);
	
	_x0 *= 501125321;
	_y0 *= 1136930381;
	
	var _x1 = _x0 + 501125321;
	var _y1 = _y0 + 1136930381;
	
	var _xf0 = lerp(grad_coord(_x0, _y0, _xd0, _yd0), grad_coord(_x1, _y0, _xd1, _yd0), _xs);
	var _xf1 = lerp(grad_coord(_x0, _y1, _xd0, _yd1), grad_coord(_x1, _y1, _xd1, _yd1), _xs);
	
	return ((lerp(_xf0, _xf1, _ys) * 1.4247691104677813) + 1) / 2;
}

/**
* Generate Perlin Noise for the given coordinates.
*
* @param {real} _x x-coordinate to use.
* @param {real} _y y-coordinate to use.
*/
function simplex_noise(_x, _y) {
	var _sqrt3 = 1.7320508075688772935274463415059;
	var _g2 = (3 - _sqrt3) / 6;
	
	var _i = floor(_x);
	var _j = floor(_y);
	var _xi = _x - _i;
	var _yi = _y - _j
	
	var _t = (_xi + _yi) * _g2;
	var _x0 = _xi - _t;
	var _y0 = _yi - _t;
	
	_i *= 501125321;
	_j *= 1136930381;
	
	var _n0, _n1, _n2;
	
	var _a = 0.5 - _x0 * _x0 - _y0 * _y0;
	if (_a <= 0) {
		_n0 = 0;
	}
	else {
		_n0 = (_a * _a) * (_a * _a) * grad_coord(_i, _j, _x0, _y0);
	}
	
	var _c = (2 * (1 - 2 * _g2) * (1 / _g2 - 2)) * _t + ((-2 * (1 - 2 * _g2) * (1 - 2 * _g2)) + _a);
	if (_c <= 0) {
		_n2 = 0;
	}
	else {
		var _x2 = _x0 + (2 * _g2 - 1);
		var _y2 = _y0 + (2 * _g2 - 1);
		_n2 = _c * _c * (_c * _c) * grad_coord(_i +  501125321, _j + 1136930381, _x2, _y2);
	}
	
	if (_y0 > _x0) {
		var _x1 = _x0 + _g2;
		var _y1 = _y0 + _g2 - 1;
		var _b = 0.5 - _x1 * _x1 - _y1 * _y1;
		if (_b <= 0) {
			_n1 = 0;
		}
		else {
			_n1 = _b * _b * (_b * _b) * grad_coord(_i, _j + 1136930381, _x1, _y1)
		}
	}
	else {
		var _x1 = _x0 + _g2 - 1;
		var _y1 = _y0 + _g2;
		var _b = 0.5 - _x1 * _x1 - _y1 * _y1;
		if (_b <= 0) {
			_n1 = 0;
		}
		else {
		 _n1 = (_b * _b) * (_b * _b) * grad_coord(_i + 501125321, _j, _x1, _y1);
		}
	}
	
	return (((_n0 + _n1 + _n2) * 99.83685446303647) + 1) / 2;
}

/**
* Fade function for noise generation.
*
* @param {real} _v Input value.
* @returns {real} Output value.
*/
function fade(_v) {
	return _v * _v * _v * (_v * (_v * 6 - 15) + 10);
}

/**
* Generate hash for noise generation
*
* @param {real} _xprime First hash value.
* @param {real} _yprime Second hash value.
* @returns {real} Generated hash.
*/
function hash(_xprime, _yprime) {
	var _seed = random_get_seed();
	
	var _hash = _seed ^ _xprime ^ _yprime;
	
	_hash *= 0x27d43b2d;
	return _hash;
}

/**
* Gradient generation for noise.
*
* @param {real} _xprime First hash value.
* @param {real} _yprime Second hash value.
* @param {real} _xd First gradient coordinate.
* @param {real} _yd Second gradient coordinate.
* @return {real} Result
*/
function grad_coord(_xprime, _yprime, _xd, _yd) {
	var _hash = hash(_xprime, _yprime);
	_hash ^= _hash >> 15;
	_hash &= 127 << 1;
	
	var _xg = global.gradients[_hash];
	var _yg = global.gradients[_hash | 1];
	
	return _xd * _xg + _yd * _yg;
}
